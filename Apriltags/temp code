import math
import cv2 
import numpy as np

# NOTE: NEEDS IMPLEMENTATION INTO MAIN CODE
def distance_to_pixels(pixel_length):
    if pixel_length == 0:
         pixel_length = 1
    angle = 75/2
    angle = math.radians(angle)
    # oppisite_meters = math.tan((angle)) * distance 
    # ratio_of_apriltag = oppisite_meters / 0.2
    # pixel_legnth = 1280 / ratio_of_apriltag
    # return pixel_legnth
    ratio_of_apriltag = 1280/pixel_length
    oppisite_meters = 0.1524 / ratio_of_apriltag
    distance = angle / oppisite_meters
    return distance / 12 * 0.3048







count = 0

def dist(x1, y1, x2, y2):
    return np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# Load an image

cap = cv2.VideoCapture(0)
frame = cv2.VideoCapture(0)

 
if not cap.isOpened():
    print("err")
    quit()

# aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)
aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_APRILTAG_16H5)
parameters = cv2.aruco.DetectorParameters()



while True:
    ret, img = cap.read()

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    #2ft =
    # F = P * D / W

    corners, ids, rejectedImgPoints = cv2.aruco.detectMarkers(gray, aruco_dict)
    for i in corners:
        count += 1
        (topLeft, topRight, bottomRight, bottomLeft) = i.reshape((4, 2))
        topRight = (int(topRight[0]), int(topRight[1]))
        bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
        bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
        topLeft = (int(topLeft[0]), int(topLeft[1]))
        leftLength = topLeft[1] - bottomLeft[1]
        rightLength = topRight[1] - bottomRight[1]
        bottomLength = bottomRight[0] - bottomLeft[0]
        topLength = topRight[0] - topLeft[0]


        if count % 10 == 0:
            avr = (leftLength + rightLength) / 2
            dist = distance_to_pixels(avr)
            print(f"{dist} Meters")
    
            

           

    #end = cv2.putText(gray, str(distance), (500, 500), cv2.FONT_HERSHEY_SIMPLEX, 5, (255, 255, 255), 10)

    frame_markers = cv2.aruco.drawDetectedMarkers(img.copy(), corners, ids)
    cv2.imshow("we love numpy", frame_markers)
    # plt.savefig("_data/markers.pdf")
    # plt.show()



    if cv2.waitKey(1) == ord('q'):
            break    
